pipeline {
    agent {
        docker {
            image 'armdevu/maven-jdk-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        DOCKER_IMAGE = 'sample-spring-boot-app'
        DOCKER_REGISTRY = 'https://index.docker.io/v1/'
        DOCKER_REPOSITORY = "armdevu/${DOCKER_IMAGE}"
    }
    stages {
        stage('Cleanup workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout Code') {
            steps {
                echo 'Checking out code from the master branch...'
                git branch: 'master', url: 'https://github.com/anuja2015/CICDwithArgo.git'
            }
        }
        stage('Build') {
            steps {
                echo 'Building the Spring Boot application...'
                dir('sourcecode') {
                sh 'mvn clean package'
                }
            }
        
        }
        stage('Build Docker Image') {
            
            
            steps {
                echo 'Building the Docker image...'
                dir('sourcecode') {
                    sh "docker build -t ${DOCKER_IMAGE}:${env.BUILD_ID} ."
                }
            }
        }
        stage('Docker Login') {
            
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh """
                    echo $DOCKER_PASSWORD | docker login $DOCKER_REGISTRY -u $DOCKER_USER --password-stdin
                    """
                }
            }
        }

        stage('Push Docker Image') {
            
            steps {
                echo 'Pushing the Docker image to Docker Hub...'
                script {
                     // Define your Docker Hub repository (replace with your actual repo name)
                     def repository="armdevu"

                    // Tag the image
                    sh "docker tag ${DOCKER_IMAGE}:${env.BUILD_ID} ${DOCKER_REPOSITORY}:${env.BUILD_ID}"

                    // Push the image to Docker Hub
                    sh "docker push ${DOCKER_REPOSITORY}:${env.BUILD_ID}"
                }
            }
        }
    }
    post {
        success {
            echo 'Build completed successfully!'
        }
        failure {
            echo 'Build failed. Check the logs for details.'
        }
        always {
            sh "docker logout $DOCKER_REGISTRY"
        }

    }
}
